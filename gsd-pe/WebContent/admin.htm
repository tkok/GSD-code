<!DOCTYPE html>
<html>
<head>
	<link href="style.css" rel="stylesheet" type='text/css'>
	<link href='http://fonts.googleapis.com/css?family=Droid+Serif:400,700|Droid+Sans:400,700' rel='stylesheet' type='text/css'>
 	<script src="http://code.jquery.com/jquery-1.9.1.js"></script>
</head>
<body>
<script>
// Console test
/*$.getJSON( "http://localhost:8080/test/GetAllPolicies", function( json ) {
	   // iterate over each policy
	   for (var k in json) {
		   console.log("---------- start of policy ----------") 
		   // id
		   console.log( "Id: " + json[k].id );
		   // from time
		   console.log( "Fromtime: " + json[k].fromTime );
		   // to time
		   console.log( "Totime: " + json[k].toTime );
		   // is active?
		   console.log( "Is active: " + json[k].active );
		   
		   		// iterate over statements
		   		for (var l in json[k].policy.statements) {
		   			// statement type
		   			console.log("----- statement: " + l + " ----- type: " + json[k].policy.statements[l].type);
		   			// iterate over conditionalExpressions
			   		for (var m in json[k].policy.statements[l].data.conditionalExpressions) {
			   			console.log("--- conditionalExpression: " + m + " ---");
		   				
			   			// get prefixOperator
		   				console.log( "prefixOperator: " + json[k].policy.statements[l].data.conditionalExpressions[m].prefixOperator );
			   			// aValue type
		   				console.log( "type: " + json[k].policy.statements[l].data.conditionalExpressions[m].aValue.type );
		   				// aValue data floatvalue
		   				console.log( "floatvalue: " + json[k].policy.statements[l].data.conditionalExpressions[m].aValue.data.floatValue );
		   				// operator
		   				console.log( "operator: " + json[k].policy.statements[l].data.conditionalExpressions[m].operator );
		   				// sensorid
		   				console.log( "sensorid: " + json[k].policy.statements[l].data.conditionalExpressions[m].sensorId );
			   		}
			   		// iterate over thenStatements
			   		for (var m in json[k].policy.statements[l].data.thenStatements) {
			   			console.log("--- thenStatement: " + m + " ---");
			   			// check for nested statements
			   			if (json[k].policy.statements[l].data.thenStatements[m].type == "dk.itu.kben.gsd.domain.IfStatement") {
			   				// aValue type
			   				console.log( "type: " + json[k].policy.statements[l].data.thenStatements[m].type );
			   				// iterate over nested conditionalExpressions
					   		for (var n in json[k].policy.statements[l].data.thenStatements[m].data.conditionalExpressions) {
					   			console.log("-- NESTED 1st lvl conditionalExpression: " + n + " --");
				   				
					   			// get prefixOperator
				   				console.log( "prefixOperator: " + json[k].policy.statements[l].data.thenStatements[m].data.conditionalExpressions[n].prefixOperator );
					   			// aValue type
				   				console.log( "type: " + json[k].policy.statements[l].data.thenStatements[m].data.conditionalExpressions[n].aValue.type );
				   				// aValue data floatvalue
				   				console.log( "floatvalue: " + json[k].policy.statements[l].data.thenStatements[m].data.conditionalExpressions[n].aValue.data.floatValue );
				   				// operator
				   				console.log( "operator: " + json[k].policy.statements[l].data.thenStatements[m].data.conditionalExpressions[n].operator );
				   				// sensorid
				   				console.log( "sensorid: " + json[k].policy.statements[l].data.thenStatements[m].data.conditionalExpressions[n].sensorId );
					   		}
					   		// iterate over nested thenStatements
					   		for (var n in json[k].policy.statements[l].data.thenStatements[m].data.thenStatements) {
					   			// check for 2nd level nested statements
					   			if (json[k].policy.statements[l].data.thenStatements[m].data.thenStatements[m].type == "dk.itu.kben.gsd.domain.IfStatement") {
					   				// IF we want to support 2nd level nested statements - do the same as for 1st level......
					   				console.log("-- NESTED 2nd lvl thenStatement: " + n + " ---");
					   			} else {
					   			console.log("-- NESTED 1st lvl thenStatement: " + n + " ---");
				   				// aValue type
				   				console.log( "type: " + json[k].policy.statements[l].data.thenStatements[m].data.thenStatements[m].type );
				   				// aValue data floatvalue
				   				console.log( "floatvalue: " + json[k].policy.statements[l].data.thenStatements[m].data.thenStatements[m].data.aValue.floatValue );
				   				// sensorID
				   				console.log( "operator: " + json[k].policy.statements[l].data.thenStatements[m].data.thenStatements[m].data.sensorID );
					   			}
					   		}
					   		// iterate over nested elseStatements
					   		for (var n in json[k].policy.statements[l].data.thenStatements[m].data.elseStatements) {
					   			console.log("-- NESTED 1st lvl elseStatement: " + m + " ---");
					   			// aValue type
				   				console.log( "type: " + json[k].policy.statements[l].data.thenStatements[m].data.elseStatements[n].type );
				   				// aValue data floatvalue
				   				console.log( "floatvalue: " + json[k].policy.statements[l].data.thenStatements[m].data.elseStatements[n].data.aValue.floatValue );
				   				// sensorID
				   				console.log( "operator: " + json[k].policy.statements[l].data.thenStatements[m].data.elseStatements[n].data.sensorID );
					   		}
			   			} else {
			   				// aValue type
			   				console.log( "type: " + json[k].policy.statements[l].data.thenStatements[m].type );
			   				// aValue data floatvalue
			   				console.log( "floatvalue: " + json[k].policy.statements[l].data.thenStatements[m].data.aValue.floatValue );
			   				// sensorID
			   				console.log( "operator: " + json[k].policy.statements[l].data.thenStatements[m].data.sensorID );
			   			}
			   		}
			   		// iterate over elseStatements
			   		for (var m in json[k].policy.statements[l].data.elseStatements) {
			   			console.log("--- elseStatement: " + m + " ---");
			   			// aValue type
		   				console.log( "type: " + json[k].policy.statements[l].data.elseStatements[m].type );
		   				// aValue data floatvalue
		   				console.log( "floatvalue: " + json[k].policy.statements[l].data.elseStatements[m].data.aValue.floatValue );
		   				// sensorID
		   				console.log( "operator: " + json[k].policy.statements[l].data.elseStatements[m].data.sensorID );
			   		}
		   		}
		  console.log("---------- end of policy ----------") 
		 }
	   // Update a value (save json using persistPolicy)
	   // For each policy items can be updated as below:
	   console.log("---------- Test of setting/updating a value in json ----------") 
	   json[0].id = 3000;
	   console.log( "Id: " + json[0].id );
	   
	   // To create a new policy
	   console.log("---------- Build new policy ----------") 
	   // Have a basic template in a var that have all the basic values constructed already
	   var policyStartTemplate = {"statements":[{"type":"dk.itu.kben.gsd.domain.IfStatement","data":{"conditionalExpressions":[{"prefixOperator":"AND","aValue":{"type":"dk.itu.kben.gsd.domain.FloatValue","data":{"floatValue":23.0}},"operator":"GREATER_THAN","sensorId":"environment.temp"}],"thenStatements":[{"type":"dk.itu.kben.gsd.domain.SetStatement","data":{"aValue":{"floatValue":1.0},"sensorID":"room-20-ac-19-gain"}}],"elseStatements":[{"type":"dk.itu.kben.gsd.domain.SetStatement","data":{"aValue":{"floatValue":0.0},"sensorID":"room-20-ac-19-gain"}}]}}]}
	   // then alter the stuff we want in our new policy
	   // For instance change float value from 23 to 24
	   policyStartTemplate.statements[0].data.conditionalExpressions[0].aValue.data.floatValue = 24;
	   
	   console.log(policyStartTemplate.statements[0].data.conditionalExpressions[0].aValue.data.floatValue);
	   // After more changes then post it to /persistPolicy
	 });*/
</script>
 <div class="header">
 <div class="top">Policy Engine Administration</div>
 <div class="menu"><a id="active" href="JavaScript:void(0);">Running policies</a> | <a id="all" href="JavaScript:void(0);">All policies</a></div>
 </div>
 <div class="policies">

<script>
function doPopulation(json)
{
	// iterate over each policy
	   for ( var k in json) {
		   
		// Append policy to view
			$('.policies')
					.append(
							'<div class="policy_box"><form action="" method="post"><div class="inner_section"><b>Id: '
									+ json[k].id
									+ '</b><br/><br/><span style="color: lightgreen;">Active</span></div><div class="inner_section">From: '
									+ json[k].fromTime
									+ '<br /><br />To: '
									+ json[k].toTime
									+ '<br /><br />Name: '
									+ json[k].name
									+ '<br /><br />Description: '
									+ json[k].description
									+ '</div>'
									+ '<div id="if-' + json[k].id + '" class="inner_section"><div><b>IF VALUES </b></div>'
									+ '</div>'
									+ '<div id="then-' + json[k].id + '" class="inner_section"><div><b>THEN VALUES </b></div>'
									+ '</div>'
									+ '<div id="then-nested-' + json[k].id + '" class="inner_section"><div><b>THEN (1st level nested) VALUES </b></div>'
									+ '<div id="then-nested-if-' + json[k].id + '" class="inner_section"><div><i><b>IF VALUES </b></i></div>'
									+ '</div>'
									+ '<div id="then-nested-then-' + json[k].id + '" class="inner_section"><div><i><b>THEN VALUES </b></i></div>'
									+ '</div>'
									+ '<div id="then-nested-else-' + json[k].id + '" class="inner_section"><div><i><b>ELSE VALUES </b></i></div>'
									+ '</div>'
									+ '</div>'
									+ '<div id="else-' + json[k].id + '" class="inner_section"><div><b>ELSE VALUES </b></div>'
									+ '</div>'
									+ '<div class="inner_section"><label for="policy">'
									+ '</label><input type="text" value="" name="whatever" class="field" id="policy" placeholder="Whatever value"></div><div class="inner_section"><input type="submit" value="Update" name="update" class="button"> <input type="submit" value="Deactivate" name="update" class="button"></div><div style="clear:both"></div></form></div>');

					// iterate over statements
					for ( var l in json[k].policy.statements) {
						// statement type
						var con_type = json[k].policy.statements[l].type;

						// iterate over conditionalExpressions
						for ( var m in json[k].policy.statements[l].data.conditionalExpressions) {
							// Append to policy
							$('#if-'+ json[k].id)
							.append('<div id="if-' + json[k].id + '-' + l + '-' + m +'" class="inner_inner_section if"><div><b>if-' + json[k].id + '-' + l + '-' + m +'</b></div>'
							+ json[k].policy.statements[l].data.conditionalExpressions[m].prefixOperator
							+ ', '
							+ json[k].policy.statements[l].data.conditionalExpressions[m].aValue.type
							+ ', '
							+ json[k].policy.statements[l].data.conditionalExpressions[m].aValue.data.floatValue
							+ ', '
							+ json[k].policy.statements[l].data.conditionalExpressions[m].operator
							+ ', '
							+ json[k].policy.statements[l].data.conditionalExpressions[m].sensorId
							+ '<div style="clear: both;"></div></div>'
							);
						}
						
						// iterate over thenStatements
				   		for (var m in json[k].policy.statements[l].data.thenStatements) {

				   			// check for nested statements
				   			if (json[k].policy.statements[l].data.thenStatements[m].type == "dk.itu.kben.gsd.domain.IfStatement") {

				   				/*// iterate over nested conditionalExpressions
						   		for (var n in json[k].policy.statements[l].data.thenStatements[m].data.conditionalExpressions) {
						   			
						   		// Append to policy
									$('#then-nested-if-'+ json[k].id)
									.append('<div id="then-nested-if-' + json[k].id + '-' + l + '-' + m +'-' + n +'" class="inner_inner_section if"><div><b>then-nested-if-' + json[k].id + '-' + l + '-' + m +'-' + n +'</b></div>'
									+ json[k].policy.statements[l].data.thenStatements[m].data.conditionalExpressions[n].prefixOperator
									+ ', '
									+ json[k].policy.statements[l].data.thenStatements[m].data.conditionalExpressions[n].aValue.type
									+ ', '
									+ json[k].policy.statements[l].data.thenStatements[m].data.conditionalExpressions[n].aValue.data.floatValue
									+ ', '
									+ json[k].policy.statements[l].data.thenStatements[m].data.conditionalExpressions[n].operator
									+ ', '
									+ json[k].policy.statements[l].data.thenStatements[m].data.conditionalExpressions[n].sensorId
									+ '<div style="clear: both;"></div></div>'
									);

						   		}
						   		// iterate over nested thenStatements
						   		for (var n in json[k].policy.statements[l].data.thenStatements[m].data.thenStatements) {
						   			// check for 2nd level nested statements
						   			if (json[k].policy.statements[l].data.thenStatements[m].data.thenStatements[n].type == "dk.itu.kben.gsd.domain.IfStatement") {
						   				// IF we want to support 2nd level nested statements - do the same as for 1st level......
						   				console.log("-- NESTED 2nd lvl thenStatement: " + n + " ---");
						   				
						   				// NO SUPPORT FOR 2nd level nested so just take type Append to policy
										$('#then-nested-then-'+ json[k].id)
										.append('<div id="then-nested-then-' + json[k].id + '-' + l + '-' + m +'-' + n +'" class="inner_inner_section then"><div><b>then-nested-then-' + json[k].id + '-' + l + '-' + m +'-' + n +'</b></div>'
										+ '2nd level nested NOT SUPPORTED, '
										+ json[k].policy.statements[l].data.thenStatements[m].data.thenStatements[n].type
										+ '<div style="clear: both;"></div></div>'
										);

										
						   			} else {
						   			
						   			// Append to policy
									$('#then-nested-then-'+ json[k].id)
									.append('<div id="then-nested-then-' + json[k].id + '-' + l + '-' + m +'-' + n +'" class="inner_inner_section then"><div><b>then-nested-then-' + json[k].id + '-' + l + '-' + m +'-' + n +'</b></div>'
									+ json[k].policy.statements[l].data.thenStatements[m].data.thenStatements[n].type
									+ ', '
									+ json[k].policy.statements[l].data.thenStatements[m].data.thenStatements[n].data.aValue.floatValue
									+ ', '
									+ json[k].policy.statements[l].data.thenStatements[m].data.thenStatements[n].data.sensorID
									+ '<div style="clear: both;"></div></div>'
									);	
					   			
						   			
						   			}
						   			
						   			
						   			
						   		}
						   		// iterate over nested elseStatements
						   		for (var n in json[k].policy.statements[l].data.thenStatements[m].data.elseStatements) {
						   			
						   			// Append to policy
									$('#then-nested-else-'+ json[k].id)
									.append('<div id="then-nested-else-' + json[k].id + '-' + l + '-' + m +'-' + n +'" class="inner_inner_section else"><div><b>then-nested-else-' + json[k].id + '-' + l + '-' + m +'-' + n +'</b></div>'
									+ json[k].policy.statements[l].data.thenStatements[m].data.elseStatements[n].type
									+ ', '
									+ json[k].policy.statements[l].data.thenStatements[m].data.elseStatements[n].data.aValue.floatValue
									+ ', '
									+ json[k].policy.statements[l].data.thenStatements[m].data.elseStatements[n].data.sensorID
									+ '<div style="clear: both;"></div></div>'
									);
						   		}*/
				   			} else {
				   				
				   				// Append to policy (non nested)
								$('#then-'+ json[k].id)
								.append('<div id="then-' + json[k].id + '-' + l + '-' + m +'" class="inner_inner_section then"><div><b>then-' + json[k].id + '-' + l + '-' + m +'</b></div>'
								+ json[k].policy.statements[l].data.thenStatements[m].type
								+ ', '
								+ json[k].policy.statements[l].data.thenStatements[m].data.aValue.floatValue
								+ ', '
								+ json[k].policy.statements[l].data.thenStatements[m].data.sensorID
								+ '<div style="clear: both;"></div></div>'
								);
				   			}
				   		}
				   		// iterate over elseStatements
				   		for (var m in json[k].policy.statements[l].data.elseStatements) {
				   			
							// Append to policy
							$('#else-'+ json[k].id)
							.append('<div id="else-' + json[k].id + '-' + l + '-' + m +'" class="inner_inner_section else"><div><b>else-' + json[k].id + '-' + l + '-' + m +'</b></div>'
							+ json[k].policy.statements[l].data.elseStatements[m].type
							+ ', '
							+ json[k].policy.statements[l].data.elseStatements[m].data.aValue.floatValue
							+ ', '
							+ json[k].policy.statements[l].data.elseStatements[m].data.sensorID
							+ '<div style="clear: both;"></div></div>'
							);

				   		}

					}
					
					
					
					$('#if-'+ json[k].id)
					.append('<div style="clear: both;"></div>');
					
					$('#else-'+ json[k].id)
					.append('<div style="clear: both;"></div>');
					
					$('#then-'+ json[k].id)
					.append('<div style="clear: both;"></div>');

				}
}

$("#all").click(function() {
		
		$('.policies').empty();
		
    	$.getJSON( "http://localhost:8080/test/GetAllPolicies", function( json ) {
    		
    		doPopulation(json);
    		
    });
});

$("#active").click(function() {
	
	$('.policies').empty();
	
	$.getJSON( "http://localhost:8080/test/GetActivePolicies", function( json ) {
		   
			doPopulation(json);
	});
});

// Default behavior
$.getJSON( "http://localhost:8080/test/GetActivePolicies", function( json ) {
	   
			doPopulation(json);
	
	});
</script>

</div>
</body>
</html>