<!DOCTYPE html>
<html>
<head>
	<link href="style.css" rel="stylesheet" type='text/css'>
	<link href='http://fonts.googleapis.com/css?family=Droid+Serif:400,700|Droid+Sans:400,700' rel='stylesheet' type='text/css'>
 	<script src="http://code.jquery.com/jquery-1.9.1.js"></script>
</head>
<body>
 <div class="header">
 <div class="top">Policy Engine Administration</div>
 <div class="menu"><a id="active" href="JavaScript:void(0);">Running policies</a> | <a id="all" href="JavaScript:void(0);">All policies</a></div>
 </div>
 <div class="policies">
<script>

function recursiveThen(json, k, l, m)
		{

				   			// check for nested statements
				   			if (json[k].policy.statements[l].data.thenStatements[m].type == "dk.itu.policyengine.domain.IfStatement") {

				   				// iterate over nested conditionalExpressions
						   		for (var n in json[k].policy.statements[l].data.thenStatements[m].data.conditionalExpressions) {
						   			
						   		// Append to policy
									$('#then-nested-if-'+ json[k].id)
									.prepend('<div id="then-nested-if-' + json[k].id + '-' + l + '-' + m +'-' + n +'" class="inner_inner_section if"><div><b>then-nested-if-' + json[k].id + '-' + l + '-' + m +'-' + n +'</b></div>'
									+ json[k].policy.statements[l].data.thenStatements[m].data.conditionalExpressions[n].prefixOperator
									+ ', '
									+ json[k].policy.statements[l].data.thenStatements[m].data.conditionalExpressions[n].aValue.type
									+ ', '
									+ json[k].policy.statements[l].data.thenStatements[m].data.conditionalExpressions[n].aValue.data.floatValue
									+ ', '
									+ json[k].policy.statements[l].data.thenStatements[m].data.conditionalExpressions[n].operator
									+ ', '
									+ json[k].policy.statements[l].data.thenStatements[m].data.conditionalExpressions[n].sensorId
									+ '</div>'
									);

						   		}
						   		// iterate over nested thenStatements
						   		for (var n in json[k].policy.statements[l].data.thenStatements[m].data.thenStatements) {
						   			
						   			
		
						   				//recursiveThen(json, k, l, m)
						   				
						   				// Problem is how to handle the paths in each level of a run
						   			
						   			
						   			// check for 2nd level nested statements
						   			if (json[k].policy.statements[l].data.thenStatements[m].data.thenStatements[n].type == "dk.itu.policyengine.domain.IfStatement") {
						   				// IF we want to support 2nd level nested statements - do the same as for 1st level......
						   				console.log("-- NESTED 2nd lvl thenStatement: " + n + " ---");
						   				
						   				// NO SUPPORT FOR 2nd level nested so just take type Append to policy
										$('#then-nested-then-'+ json[k].id)
										.prepend('<div id="then-nested-then-' + json[k].id + '-' + l + '-' + m +'-' + n +'" class="inner_inner_section then"><div><b>then-nested-then-' + json[k].id + '-' + l + '-' + m +'-' + n +'</b></div>'
										+ '2nd level nested NOT SUPPORTED, '
										+ json[k].policy.statements[l].data.thenStatements[m].data.thenStatements[n].type
										+ '</div>'
										);

										
						   			} else {
						   			
						   			// Append to policy
									$('#then-nested-then-'+ json[k].id)
									.prepend('<div id="then-nested-then-' + json[k].id + '-' + l + '-' + m +'-' + n +'" class="inner_inner_section then"><div><b>then-nested-then-' + json[k].id + '-' + l + '-' + m +'-' + n +'</b></div>'
									+ json[k].policy.statements[l].data.thenStatements[m].data.thenStatements[n].type
									+ ', '
									+ json[k].policy.statements[l].data.thenStatements[m].data.thenStatements[n].data.aValue.floatValue
									+ ', '
									+ json[k].policy.statements[l].data.thenStatements[m].data.thenStatements[n].data.sensorID
									+ '</div>'
									);	
					   			
						   			
						   			}
						   			
						   			
						   			
						   		}
						   		// iterate over nested elseStatements
						   		for (var n in json[k].policy.statements[l].data.thenStatements[m].data.elseStatements) {
						   			
						   			// Append to policy
									$('#then-nested-else-'+ json[k].id)
									.prepend('<div id="then-nested-else-' + json[k].id + '-' + l + '-' + m +'-' + n +'" class="inner_inner_section else"><div><b>then-nested-else-' + json[k].id + '-' + l + '-' + m +'-' + n +'</b></div>'
									+ json[k].policy.statements[l].data.thenStatements[m].data.elseStatements[n].type
									+ ', '
									+ json[k].policy.statements[l].data.thenStatements[m].data.elseStatements[n].data.aValue.floatValue
									+ ', '
									+ json[k].policy.statements[l].data.thenStatements[m].data.elseStatements[n].data.sensorID
									+ '</div>'
									);
						   		}
				   			} else {
				   				
				   				// Append to policy (non nested)
								$('#then-'+ json[k].id)
								.prepend('<div id="then-' + json[k].id + '-' + l + '-' + m +'" class="inner_inner_section then"><div><b>then-' + json[k].id + '-' + l + '-' + m +'</b></div>'
								+ json[k].policy.statements[l].data.thenStatements[m].type
								+ ', '
								+ json[k].policy.statements[l].data.thenStatements[m].data.aValue.floatValue
								+ ', '
								+ json[k].policy.statements[l].data.thenStatements[m].data.sensorID
								+ '</div>'
								);
				   			}
}

function doPopulation(json)
{
	// iterate over each policy
	   for ( var k in json) {
		   
		// Append policy to view
			$('.policies')
					.append(
							'<div class="policy_box"><form action="" method="post"><div class="inner_section"><b>Id: '
									+ json[k].id
									+ '</b><br/><br/><span style="color: lightgreen;">Active</span></div><div class="inner_section">From: '
									+ json[k].fromTime
									+ '<br /><br />To: '
									+ json[k].toTime
									+ '<br /><br />Name: '
									+ json[k].name
									+ '<br /><br />Description: '
									+ json[k].description
									+ '</div>'
									+ '<div class="inner_section"><b>IF VALUES </b></div>'
									+ '<div id="if-' + json[k].id + '" class="inner_section">'
									+ '<div style="clear: both;"></div>'
									+ '</div>'
									+ '<div class="inner_section"><b>THEN VALUES </b></div>'
									+ '<div id="then-' + json[k].id + '" class="inner_section">'
									+ '<div style="clear: both;"></div>'
									+ '</div>'
									+ '<div class="inner_section"><b>THEN (1st level nested) VALUES </b></div>'
									+ '<div id="then-nested-' + json[k].id + '" class="inner_section">'
									+ '<div class="inner_section float"><i><b>IF VALUES </b></i></div>'
									+ '<div id="then-nested-if-' + json[k].id + '" class="inner_section">'
									+ '<div style="clear: both;"></div>'
									+ '</div>'
									+ '<div class="inner_section"><i><b>THEN VALUES </b></i></div>'
									+ '<div id="then-nested-then-' + json[k].id + '" class="inner_section">'
									+ '<div style="clear: both;"></div>'
									+ '</div>'
									+ '<div class="inner_section"><i><b>ELSE VALUES </b></i></div>'
									+ '<div id="then-nested-else-' + json[k].id + '" class="inner_section">'
									+ '<div style="clear: both;"></div>'
									+ '</div>'
									+ '</div>'
									+ '<div class="inner_section"><b>ELSE VALUES </b></div>'
									+ '<div id="else-' + json[k].id + '" class="inner_section">'
									+ '<div style="clear: both;"></div>'
									+ '</div>'
									+ '<div class="inner_section"><label for="policy">'
									+ '</label><input type="text" value="" name="whatever" class="field" id="policy" placeholder="Whatever value"></div><div class="inner_section"><input type="submit" value="Update" name="update" class="button"> <input type="submit" value="Deactivate" name="update" class="button"></div><div style="clear:both"></div></form></div>');

					// iterate over statements
					for ( var l in json[k].policy.statements) {
						// statement type
						var con_type = json[k].policy.statements[l].type;

						// iterate over conditionalExpressions
						for ( var m in json[k].policy.statements[l].data.conditionalExpressions) {
							// Append to policy
							$('#if-'+ json[k].id)
							.prepend('<div id="if-' + json[k].id + '-' + l + '-' + m +'" class="inner_inner_section if"><div><b>if-' + json[k].id + '-' + l + '-' + m +'</b></div>'
							+ json[k].policy.statements[l].data.conditionalExpressions[m].prefixOperator
							+ ', '
							+ json[k].policy.statements[l].data.conditionalExpressions[m].aValue.type
							+ ', '
							+ json[k].policy.statements[l].data.conditionalExpressions[m].aValue.data.floatValue
							+ ', '
							+ json[k].policy.statements[l].data.conditionalExpressions[m].operator
							+ ', '
							+ json[k].policy.statements[l].data.conditionalExpressions[m].sensorId
							+ '</div>'
							);
						}
						
						// iterate over thenStatements
				   		for (var m in json[k].policy.statements[l].data.thenStatements) {

				   			recursiveThen(json, k, l, m);

				   		}
				   		// iterate over elseStatements
				   		for (var m in json[k].policy.statements[l].data.elseStatements) {
				   			
							// Append to policy
							$('#else-'+ json[k].id)
							.prepend('<div id="else-' + json[k].id + '-' + l + '-' + m +'" class="inner_inner_section else"><div><b>else-' + json[k].id + '-' + l + '-' + m +'</b></div>'
							+ json[k].policy.statements[l].data.elseStatements[m].type
							+ ', '
							+ json[k].policy.statements[l].data.elseStatements[m].data.aValue.floatValue
							+ ', '
							+ json[k].policy.statements[l].data.elseStatements[m].data.sensorID
							+ '</div>'
							);

				   		}

					}
				}
}



$("#all").click(function() {
		
		$('.policies').empty();
		
    	$.getJSON( "http://localhost:8080/test/GetAllPolicies", function( json ) {
    		
    		doPopulation(json);
    		
    });
});

$("#active").click(function() {
	
	$('.policies').empty();
	
	$.getJSON( "http://localhost:8080/test/GetActivePolicies", function( json ) {
		   
			doPopulation(json);
	});
});

// Default behavior
$.getJSON( "http://localhost:8080/test/GetActivePolicies", function( json ) {
	   
			doPopulation(json);
	
	});
</script>

</div>
</body>
</html>